[{"D:\\Practices\\rainboxJs\\rainboxjs\\src\\index.tsx":"1","D:\\Practices\\rainboxJs\\rainboxjs\\src\\GenerateRainbow.tsx":"2"},{"size":2658,"mtime":1612388291001,"results":"3","hashOfConfig":"4"},{"size":1003,"mtime":1612386896814,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8","usedDeprecatedRules":"9"},"1645bmv",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"D:\\Practices\\rainboxJs\\rainboxjs\\src\\index.tsx",["14"],"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './App.scss';\nimport GenerateRainbow from './GenerateRainbow';\n\n/// ///////////////////////////////////////////////\n\ninterface IInfoBlocks{\n  heading:string; \n  text:string; \n  syntax:string;\n  component:any;\n}\n\nconst InfoBlocks = (props:IInfoBlocks) => {\n  const {\n    heading,\n    text,\n    syntax,\n    component,\n  } = props;\n  return (\n    <div className=\"info-block\">\n    <div className=\"flex-50\">\n      <h2 className=\"h1\">\n        {heading}\n      </h2>\n      <p>\n        {text}\n      </p>\n      <pre>\n        <code className=\"language-js\">\n        {syntax}\n        </code>\n      </pre>\n    </div>\n    <div className=\"flex-50\">\n    {component}\n    </div>\n  </div>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <GenerateRainbow\n      totalColors={20}\n    />\n    <div className=\"header\">\n      <h1 className=\"heading\">RainbowJS</h1>\n      <p className=\"tagline\">A dead-simple rainbox generator made with React</p>\n    </div>\n    <GenerateRainbow\n      totalColors={20}\n    />\n    <div className=\"info-container\">\n      <InfoBlocks\n        heading=\"Basic Syntax\"\n        text=\"This is how you do it!\"\n        syntax={`\n      <GenerateRainbow\n        totalColors={20}\n      />        \n        `}\n        component={      <GenerateRainbow\n          totalColors={20}\n          />}\n      />\n      <InfoBlocks\n        heading=\"Customize\"\n        text=\"Try providing heights and widths of the colored blocks. Can be either percent (%) or Pixels (px)\"\n        syntax={`\n      <GenerateRainbow\n        totalColors={20}\n        boxHeight=\"50px\"\n        boxWidth=\"20px\"\n      />      \n        `}\n        component={      \n        <GenerateRainbow\n          totalColors={20}\n          boxHeight=\"50px\"\n          boxWidth=\"20px\"\n          />}\n      />\n      <InfoBlocks\n        heading=\"Customize Container\"\n        text=\"Size of the container can also be customized. Can be either percent (%) or Pixels (px)\"\n        syntax={`\n      <GenerateRainbow\n        totalColors={7}\n        boxHeight=\"50px\"\n        boxWidth=\"20px\"\n        containerHeight=\"100px\"\n        containerWidth=\"100px\"\n      />    \n        `}\n        component={      \n        <GenerateRainbow\n          totalColors={7}\n          boxHeight=\"50px\"\n          boxWidth=\"20px\"\n          containerHeight=\"100px\"\n          containerWidth=\"100px\"\n          />\n        }\n      />\n      <p className=\"coming-soon\">Updates coming soon!</p>\n    </div>\n    <GenerateRainbow\n      totalColors={20}\n    />      \n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n/// ///////////////////////////////////////////////\n",["15","16"],"D:\\Practices\\rainboxJs\\rainboxjs\\src\\GenerateRainbow.tsx",["17"],"interface IGenerateRainbowProps {\n  totalColors?: number;\n  boxHeight?: string;\n  boxWidth?: string;\n  containerHeight?: string;\n  containerWidth?: string;\n} \n\nconst GenerateRainbow = (props:any) => {\n  const {totalColors, \n    boxHeight, \n    boxWidth,\n    containerHeight,\n    containerWidth  ,\n  } = props;\n\n  const colors = [];\n  for (let i = 0; i < totalColors; i+=1) {\n    const color = \"hsl(\" + (360 * i / totalColors) + \",100%,50%)\";\n    colors.push(color);\n  }\n\n  const styles = {\n    height: boxHeight,\n    width: boxWidth\n  }\n\n  return (\n    <div style={{width: containerWidth, height: containerHeight}}>\n      <div className=\"rainbow-container\">\n      {\n        colors.map((item) => (\n          <span style={{ ...styles, backgroundColor: `${item}`}} />\n          ))\n        }\n        </div>\n    </div>\n  );\n\n}\n\nGenerateRainbow.defaultProps = {\n  totalColors: 7,\n  boxHeight: '10px',\n  boxWidth: '10%',\n  containerHeight: \"100%\",\n  containerWidth: \"100%\",  \n}\n\nexport default GenerateRainbow;",["18","19"],{"ruleId":"20","severity":1,"message":"21","line":1,"column":17,"nodeType":"22","messageId":"23","endLine":1,"endColumn":25},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"20","severity":1,"message":"28","line":1,"column":11,"nodeType":"22","messageId":"23","endLine":1,"endColumn":32},{"ruleId":"24","replacedBy":"29"},{"ruleId":"26","replacedBy":"30"},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["31"],"no-negated-in-lhs",["32"],"'IGenerateRainbowProps' is defined but never used.",["31"],["32"],"no-global-assign","no-unsafe-negation"]